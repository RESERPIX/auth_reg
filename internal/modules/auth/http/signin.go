package http

import (
	"log"
	"strings"
	"time"

	"github.com/gofiber/fiber/v2"

	"auth/internal/modules/auth/domain"
	"auth/internal/platform/notify"
	"auth/internal/platform/security"
)

type signInReq struct {
	Email      string `json:"email"`
	Password   string `json:"password"`
	DeviceName string `json:"device_name"`
}

type signInResp struct {
	Message      string `json:"message"`
	AccessToken  string `json:"access_token,omitempty"`
	RefreshToken string `json:"refresh_token,omitempty"`
	ExpiresAt    string `json:"expires_at,omitempty"`
	Requires2FA  bool   `json:"requires_2fa"`
}

// –î–æ–±–∞–≤–∏–º mailer –≤ —Ö–µ–Ω–¥–ª–µ—Ä —á–µ—Ä–µ–∑ –∑–∞–º—ã–∫–∞–Ω–∏–µ
func SignInHandler(
	userRepo domain.UserRepo,
	sessions domain.SessionRepo,
	codeRepo domain.CodeRepo, // ‚Üê –±—ã–ª–æ VerificationCodeRepo
	mailer *notify.Mailer, // ‚Üê –±—ã–ª–æ domain.Mailer
	jwtMgr *security.JWTManager,
) fiber.Handler {
	return func(c *fiber.Ctx) error {
		var req signInReq
		if err := c.BodyParser(&req); err != nil {
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
				"error_code": "INVALID_FIELDS",
				"message":    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
			})
		}

		req.Email = strings.ToLower(strings.TrimSpace(req.Email))

		u, err := userRepo.GetByEmail(req.Email)
		if err != nil || u == nil {
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
				"error_code": "INVALID_CREDENTIALS",
				"message":    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
			})
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
		if u.IsBlocked {
			return c.Status(fiber.StatusForbidden).JSON(fiber.Map{
				"error_code": "ACCOUNT_BLOCKED",
				"message":    "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
			})
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
		if !u.EmailConfirmed {
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
				"error_code": "EMAIL_NOT_CONFIRMED",
				"message":    "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º",
			})
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
		ok, _ := security.CheckPassword(*u.PasswordHash, req.Password)
		if !ok {
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
				"error_code": "INVALID_CREDENTIALS",
				"message":    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
			})
		}

		// üîê –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ 2FA?
		if u.TwoFAEnabled {
			code, err := security.RandomDigits(6)
			if err != nil {
				return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
					"error_code": "SERVER_ERROR",
					"message":    "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥",
				})
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
			err = codeRepo.Save(domain.VerificationCode{
				UserID:    u.ID,
				Kind:      domain.Code2FA,
				Code:      code,
				ExpiresAt: time.Now().Add(10 * time.Minute),
				SentTo:    u.Email,
			})
			if err != nil {
				log.Printf("failed to save 2FA code: %v", err)
				return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
					"error_code": "SERVER_ERROR",
					"message":    "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
				})
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ email (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
			if mailer != nil {
				go func() {
					if err := mailer.Send2FACode(c.Context(), u.Email, code); err != nil {
						log.Printf("failed to send 2FA email to %s: %v", u.Email, err)
					}
				}()
			}

			// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç: 2FA —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Ç–æ–∫–µ–Ω—ã –Ω–µ –≤—ã–¥–∞–Ω—ã
			return c.JSON(signInResp{
				Message:     "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
				Requires2FA: true,
			})
		}

		// üü¢ –ï—Å–ª–∏ 2FA –ù–ï –≤–∫–ª—é—á–µ–Ω–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—ã–π –≤—Ö–æ–¥

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º refresh token
		rt, _, err := security.IssueRefresh()
		if err != nil {
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
				"error_code": "SERVER_ERROR",
				"message":    "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å refresh_token",
			})
		}

		// –•–µ—à–∏—Ä—É–µ–º refresh token –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
		rth := security.HashToken(rt)
		ip := c.IP()
		ua := c.Get("User-Agent")
		dev := req.DeviceName

		s := domain.Session{
			UserID:           u.ID,
			RefreshTokenHash: rth,
			DeviceName:       &dev,
			IPAddress:        &ip,
			UserAgent:        &ua,
		}

		sess, err := sessions.Create(s)
		if err != nil {
			log.Printf("create session error: %v", err)
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
				"error_code": "SERVER_ERROR",
				"message":    "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é",
			})
		}

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º access token —Å –≤–∫–ª—é—á—ë–Ω–Ω—ã–º session_id (sid)
		at, exp, err := jwtMgr.IssueAccess(u.ID, string(u.Role), sess.ID)
		if err != nil {
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
				"error_code": "SERVER_ERROR",
				"message":    "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å access_token",
			})
		}

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã
		return c.JSON(signInResp{
			Message:      "–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω",
			AccessToken:  at,
			RefreshToken: rt,
			ExpiresAt:    exp.UTC().Format(time.RFC3339),
			Requires2FA:  false,
		})
	}
}
